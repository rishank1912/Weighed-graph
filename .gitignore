
class vertex:
    def __init__(self,val,edges):
        self.val=val
        self.edges=edges
class edge:
    def __init__(self,v,W):
        self.w=W
        self.v=v
def search(par,i):
    if par[i]==i:
        return i
    return search(par,par[i])
def union(par,rank,x,y):
    xrt=search(par,x)
    yrt=search(par,y)
    if rank[xrt]>rank[yrt]:
        par[yrt]=xrt
    elif rank[xrt]<rank[yrt]:
        par[xrt]=yrt
    else:
        par[yrt]=xrt
        rank[xrt]+=1
def find(s,t,L,vertices,v,k):
    if s.val==t:
        L.append(s.val)
        return L
    if len(s.edges)==1:
        k.pop()
        return L
    L.append(s.val)
    v[s.val]=1
    for e in s.edges:
        if v[e[0].v[e[1]]]==0:
            k.append(e[0].w)
            L=find(vertices[e[0].v[e[1]]],t,L,vertices,v,k)
    if L[-1]!=t:
        k.pop()
        L.pop()
    return L
def findMaxCapacity(n,links,s,t):
    links.sort(key = lambda x: x[2],reverse=True)
    vertices=[0]*n
    for i in range(n):
        vertices[i]=vertex(i,[])
    par=[0]*n
    rank=[0]*n
    for node in range(n):
        par[node]=node
    i,jk=0,0
    while jk<n-1:
        u,v,w=links[i]
        i+=1
        x=search(par,u)
        y=search(par,v)
        if x!=y:
            jk+=1
            a=edge([u,v],w)
            vertices[u].edges.append((a,1))
            vertices[v].edges.append((a,0))
            union(par,rank,x,y)
    result=[s]
    k=[]
    v=[0]*n
    v[s]=1
    for i in vertices[s].edges:
        k.append(i[0].w)
        result=find(vertices[i[0].v[i[1]]],t,result,vertices,v,k)
    return (min(k),result)
